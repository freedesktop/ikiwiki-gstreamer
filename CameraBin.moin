<<TableOfContents(3)>>

= CameraBin TODO =

At some point we'd like to move CameraBin to gst-plugins-good. CameraBin already has unit tests and documentation. It is currently in use on Nokia N900 and is considered for cheese. This page lists things that should be done before declaring it stable.

== Planned Changes ==

=== camera-source api ===
The embedded side has complex camera drivers that offer more functionality that classic v4l2. E.g. they might have parallel outputs at the same time. The idea here is to make a more complex camerasource api. This could be implemented as a linux-camera-source (as a bin), reusing what we have in CameraBin, or be implemented on top of a different api providing these features as a monolithic block (e.g. gst-omx based camera-source).

{{attachment:CameraBin.png}}.

This should be done as a baseclass (subclassing a GstBin), with the following features:
 * 3 pads: image, viewfinder, video (as GstGhostpads)
 * mandatory interfaces to proxy (photography, colorbalance, ...)?
If a potential camera src is already monoloithic and simillar to this (e.g. a omx-cam-src), one just maps and links the features.

=== dataflow ===
Right now (2009.11.11) we have a link from videobin back to viewfinder to so what we record. When we do the camera-source baseclass, we should move the input-selector to the Linux implementation. Then we would have 3 modes:
 * viewfinder
 * imagecapture (keeps viewfinder running)
 * videocapture (keeps viewfinder running)
This is important for the cases where one has analyzers in e.g. the viewfinder-slot to get continuous analysis results in videorecording or continuous shooting.

Open items here:
 * we might need a videoscaler element after input-selector for the viewfinder output
 * in still capture mode we might want to set the queue in the still image camera source output to "leaky" and block its src pad. We would only unblock the on shutter press for the seleccted amount of images (burstmode). We could also use videorate or even a specialized videogate element here. What the element should do:
   * only let n frames through (n=0...)
   * drop frames to produce a certain output rate

=== focusing ===
We need more focus mode. Right now the API can start AF and get a signal when AF is done. There are also camera subsystems providing continuous focusing, where we would just lock the AF on half press, adjust frame and shot.

=== continuous shooting ===
We would set the queue to leaky and block the capture pad. In contrast to single capture mode, we would keep capture-setting frozen and let a frame through, each time the capture button is pressed.

=== bracketing ===
Lock settings, take various shots with some settings changed, merge single images with some filter. We can use the !GstController for scheduling the parameter changes. Some issues with that though:
 * the camerabin pipeline is always running - we need a newsegment on the image capture pipeline, so that timestamps start with zero
 * the camerasrc is a live-src, thus it is hard to align the control-changes with frame times
 * v4l2 has no api yet to do timestamped CID changes

=== recording timestamps ===
Try pushing a newsegment to videobin, instead of rebasing timestamps with a buffer-probe.

== Open Items ==

=== effect preview ===
When adding effects to imagebin or videobin, we might want to get a preview on viewfinder for those too. We either need to apply certain effect in the source already or add them twice.

=== isp internal effects and effect selection ===
Right now camerabin offers slots for setting effects on each of the imagebin, viewfinderbin and videobin. Some ISPs (image signal processor) come with internal effects (e.g. videostabilisation). Effect settings should then be exposed as gobject properties on the camera source, so that a camera ui can set a gstreamer plugin as an effect and link the ui to the gobject properties or activate the isp internal effect and connect the ui to the properties of that.

The effect parameters should not be added to GstPhotography to avoid it growing unbounded. GstPhotography is for capture settings. This is needed for post processing effects.
 
----

TODO: add more from http://live.gnome.org/Cheese/ThreeZero?action=AttachFile&do=get&target=cheese-threezero-meeting-log.txt
