= Device Profiles =

To create the higher level device profiles we start from the XML format defined in the [[http://programmer-art.org/projects/arista-transcoder|Arista]] transcoder. There are a few changes in the XML example below though from what Arista does today. First of all we replace all element names with GStreamer Caps and secondly we replace all element attribute settings with
preset calls. Finally we expand the XML format to include all allowed choices for a given device, so that the application can offer the user other valid choices if they want to. Many GStreamer Caps are listed in the GstreamerCaps list.

The presets called in this XML file in each pass are discussed in PresetDesign

{{{
<?xml version="1.0"?>

<device>
    <make>Apple</make>
    <model>iPod</model>
    <description>Profile for Apple iPod / iPhone</description>
    <author>
        <name>Joe Example</name>
        <email>mr.example@example.org</email>
    </author>
    <version>1.0</version>
    <icon>file://ipod.svg</icon>
    <default>Normal</default>
    
    <preset>
        <name>Low</name> # This is a low quality output setting
        <container>video/quicktime,variant=apple</container>
        <extension>m4v</extension>
        <audio>
            <name>audio/mpeg,mpegversion=4</name>
            <passes>
                <pass>
                    Quality Low, Profile Low Complexity
                </pass>
            </passes>
            <channels>1, 2</channels>
        </audio>
        <video>
            <name>video/x-h264</name>
            <passes>
                <pass>
                    Quality Low, Profile Baseline
                </pass>
            </passes>
            <width>320, 640</width>
            <height>240, 480</height>
            <rate>1, 25</rate>
        </video>
    </preset>
    <preset>
        <name>Normal</name>
        <container>video/quicktime,variant=apple</container>
        <extension>m4v</extension>
        <audio>
            <name>audio/mpeg,mpegversion=4</name>
            <passes>
                <pass>
                    Quality Normal,Profile Low Complexity
                </pass>
            </passes>
            <channels>1, 2</channels>
        </audio>
        <video>
            <name>video/x-h264</name>
            <passes>
                <pass>
                    Quality Normal, Profile Baseline
                </pass>
            </passes>
            <width>320, 640</width>
            <height>240, 480</height>
            <rate>1, 30</rate>
        </video>
    </preset>
</device>
}}}

The general idea here is that you can combine any number of GStreamer element presets to build the device output. They are set in the order specified (e.g. if quality_normal sets bframes=3 and then you set profile_baseline which sets bframes=0, you will get bframes=0, so it's always a good idea to put quality values before codec profile values).

Using this simple format the presets for PSP, Nokia devices, the computer, etc are almost identical to the above and require no further modifications to the element presets.

One question which needs further thought it how to deal with variations within a device type, maybe 'iPod' is too generic for instance. We could also add another gstreamer preset for varation values if needed.

Also - what about handling multiple passes - the above can handle it by defining more <pass> elements but we'd need element profiles like e.g. 'quality_normal_2pass' and I guess setting a bitrate.

We also need to come up with a nice, but hopefully not to verbose way of including information about all supported codecs and containers formats in addition 
to our recommended one.

== Comments ==

=== from Mike Smith ===

The use of two different basic syntaxes (GKeyFile and XML) seems like unnecessary complexity. 

You're suggesting using caps to describe encoder/muxer output, and then applying presets to a selected item. However, presets apply _only_ to specific elements, so that doesn't work at all.

You provide no way to indicate what things are user-selectable - e.g. within these profiles, the user should be able to adjust bitrate, etc. But this isn't represented anywhere.

I have no understanding of the passes section; it doesn't make any sense to me.

The syntax of the various tags like channels is undefined. Probably we should just adopt gstreamer caps syntax, so you'd have something like {{{ 
<channels>[1,6]</channels> or <channels>{1,2,6}</channels>
}}}

Not sure what else needs work yet.

=== from Stefan Kost ===

Totally agree with Mike regarding the devce capabilities. What about even {{{
video/x-h264, width=[320, 640], height=[240, 480], framerate=(fraction)1/30
}}}

Also agree that xml feature are slight overkill here. The purpose of the device profile is to describe the suggested format and limmitation for a certain device.

On IRC I was suggesting to also take os-versions into account, so that we end up with profiles like this: {{{
PC.WindowsXP      // use avi with mpeg4 and mp3
PC.WindowsVista   // use asf with wmv and wma
PC.Linux          // use ogg with theora and vorbis
N8x0.Maemo4       // use avi with mpeg4 and mp3
N8x0.Maemo5       // use mp4 with h264 and aac
}}}
It could be consided to have a unversioned fallback (N8x0 that even could be a symlink incase someone does not know the version).
